// Generated by CoffeeScript 1.3.3
var callback, closureBuilder, coffeeCompile, di_config_file, di_write_file, dir, exec, fs, namespace, spacer;

dir = './';

di_config_file = dir + 'app/DependencyInjection/config.json';

di_write_file = dir + 'app/DependencyInjection/config.coffee';

spacer = '	';

namespace = 'app.di.config';

exec = require('child_process').exec;

fs = require('fs');

fs.readFile(di_config_file, 'utf8', function(err, data) {
  var args, config, output, service, _ref;
  if (err) {
    return console.log(err);
  }
  output = "goog.provide '" + namespace + "'\n\n";
  config = "config =\n";
  _ref = JSON.parse(data);
  for (service in _ref) {
    args = _ref[service];
    config += "\n" + spacer + "'" + service + "':\n";
    config += spacer + spacer + "'class':     " + args["class"] + "\n";
    output += "goog.require '" + args["class"] + "'\n";
    if (args["arguments"] !== void 0) {
      config += spacer + spacer + "'arguments': ['";
      config += args["arguments"].join("', '");
      config += "']\n";
    }
  }
  output += "\n" + config + "\nlowerKeys = (config) ->\n	for key, service of config\n		key = new String key\n		config[key.toLowerCase()] = service\n	return config\n\napp.di.config = lowerKeys config";
  return fs.writeFile(di_write_file, output, function(err) {
    if (err) {
      return console.log(err);
    } else {
      return console.log("The file was saved!");
    }
  });
});

coffeeCompile = 'coffee --bare --compile ./';

closureBuilder = 'closure-library/closure/bin/build/closurebuilder.py\
 --root=closure-library/\
 --root=app/ \
 --namespace="app.start"\
 --output_mode=compiled\
 --compiler_jar=compiler.jar\
 > app-compiled.js';

callback = function() {
  return exec(closureBuilder, function() {
    return console.log('Compile success.');
  });
};

exec(coffeeCompile, callback);
