// Generated by CoffeeScript 1.3.3
/**
	@fileroverview Dependency Injection Container
	@author Michael Czolok <michael@czolko.cz>
*/

goog.provide('DI.Container');

goog.provide('DI.Container.get');

goog.require('DI.config');

DI.Container = (function() {
  /**
  		@construct
  */

  function Container(config) {
    this.config = config;
    this.instances = new Array;
    this.set('service_container', this);
  }

  /**
  		Get service by ID
  		@param {string} key
  		@return {Object} Service
  */


  Container.prototype.get = function(key) {
    var service;
    key = new String(key);
    key = key.toLowerCase();
    if (this.config[key] === void 0) {
      throw 'Service with key "' + key + '" not found in configuration file';
    }
    if (this.instances[key] === void 0) {
      service = this.create(this.config[key]);
      this.set(key, new service);
    }
    return this.instances[key];
  };

  /**
  		Has container service?
  		@param {string} key
  		@return boolean
  */


  Container.prototype.has = function(key) {
    key = new String(key);
    return this.instances[key.toLowerCase()] === void 0;
  };

  /**
  		Initialize and add service to instance collection
  		@param {string} key
  		@param {Object} service
  		@return {Object} Service
  */


  Container.prototype.set = function(key, service) {
    key = new String(key);
    return this.instances[key.toLowerCase()] = service;
  };

  /**
  		Create service
  		@param {Object} params Mainly contents service dependencies
  		@return {Object} Non-initialized service
  */


  Container.prototype.create = function(params) {
    var argument, instancePlease, key, services, _i, _len, _ref;
    if (params['arguments'] === void 0 && params['class']) {
      return params['class'];
    } else {
      if (params['arguments']['constructor'] === Array) {
        services = new Array;
        _ref = params['arguments'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          argument = _ref[_i];
          if (argument.substr(0, 1) === '@') {
            key = argument.substr(1);
            services.push(this.get(key));
          } else {
            services.push(argument);
          }
        }
        instancePlease = this.setConstructorArguments(params['class'], services);
        return instancePlease;
      }
    }
    throw 'Error in creation class!';
  };

  /**
  		Inject services to constructor
  		http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply/3362623#3362623
  		@param {Function} constructor
  		@param {Array} services
  		@return {Function}
  */


  Container.prototype.setConstructorArguments = function(constructor, services) {
    var args;
    args = Array.prototype.slice.call(services, 0);
    return function() {
      var Temp, inst, ret;
      Temp = function() {};
      Temp.prototype = constructor.prototype;
      inst = new Temp;
      ret = constructor.apply(inst, args);
      if (Object(ret) === ret) {
        return ret;
      }
      return inst;
    };
  };

  return Container;

})();

DI.Container.get = function(config) {
  if (config == null) {
    config = DI.config;
  }
  return new DI.Container(config);
};
